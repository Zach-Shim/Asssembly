00000168 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 4/23/2021 5:48:47 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :DASM
00000000                             3  * Written by :Lucas Buckeye, Brendan Hurt, Zach Shim
00000000                             4  * Date       :4.19.21
00000000                             5  * Description:v1.0
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  *-----------------------------------------------------------
00000000                             9  * Directives:
00000000                            10  *-----------------------------------------------------------
00000100                            11              ORG     $100
00000100                            12  
00000100  =0000000D                 13  CR          EQU     $0D             ; Define Carriage Return and Line Feed
00000100  =0000000A                 14  LF          EQU     $0A 
00000100                            15  
00000100= 50 6C 65 61 73 65 ...     16  startMsg:   DC.B    'Please enter a starting address ', 0, CR, LF
00000123= 50 6C 65 61 73 65 ...     17  endMsg:     DC.B    'Please enter an ending address ', 0, CR, LF
00000145= 76 61 6C 75 65 3A ...     18  testMsg:    DC.B    'value: ', 0, CR, LF
0000014F                            19  
0000014F= 49 6E 76 61 6C 69 ...     20  badInput    DC.B    'Invalid Input', 0, CR, LF
0000015F                            21  
00000160                            22  startAddr   DS.L    1
00000164                            23  endAddr     DS.L    1
00000168                            24  
00000168                            25  *-----------------------------------------------------------
00000168                            26  * Macros:
00000168                            27  *-----------------------------------------------------------
00000168                            28  
00000168                            29  PRINT_MSG:      MACRO 
00000168                            30                  CLR.L   D0
00000168                            31                  LEA     \1, A1      ; \1 acts as a parameter
00000168                            32                  MOVE.B  #14, D0     
00000168                            33                  TRAP    #15
00000168                            34                  ENDM
00000168                            35  
00000168                            36  GET_INPUT:      MACRO
00000168                            37                  CLR D0
00000168                            38                  MOVE.B      #2, D0
00000168                            39                  TRAP        #15
00000168                            40                  ENDM
00000168                            41  
00000168                            42  *----------------------Get Starting Address-------------------
00000168                            43  MAIN:
00000168  6000 0002                 44              BRA     GET_START_ADDRESS
0000016C                            45  
0000016C                            46  GET_START_ADDRESS:
0000016C  4280                      47              CLR.L   D0
0000016E  43F8 0100                 48              LEA     startMsg, A1      
00000172  103C 000E                 49              MOVE.B  #14, D0     
00000176  4E4F                      50              TRAP    #15
00000178                            51  
00000178  43F8 0160                 52              LEA.L   startAddr, A1
0000017C  103C 0002                 53              MOVE.B  #2, D0
00000180  4E4F                      54              TRAP    #15
00000182  6000 001C                 55              BRA     VALIDATE_INPUT
00000186                            56  
00000186                            57  *----------------------Get Ending Address----------------------
00000186                            58  GET_END_ADDRESS:
00000186  4280                      59              CLR.L   D0
00000188  43F8 0123                 60              LEA     endMsg, A1      
0000018C  103C 000E                 61              MOVE.B  #14, D0     
00000190  4E4F                      62              TRAP    #15
00000192                            63  
00000192  43F8 0164                 64              LEA.L   endAddr, A1
00000196  103C 0002                 65              MOVE.B  #2, D0
0000019A  4E4F                      66              TRAP    #15
0000019C  6000 0014                 67              BRA     CHECK_LENGTH
000001A0                            68  
000001A0                            69  
000001A0                            70  *----------------------VALIDATE INPUT---------------------------      
000001A0                            71  
000001A0                            72  VALIDATE_INPUT:        
000001A0  B83C 0000                 73              CMP.B      #0, D4               ; D4 = 0 if start and end address have not been parsed
000001A4  6700 000C                 74              BEQ        CHECK_LENGTH         ; if equal, parse START address 
000001A8  B83C 0001                 75              CMP.B      #1, D4               ; D4 = 1 if start has been parsed but not end address
000001AC  67D8                      76              BEQ        GET_END_ADDRESS      ; if equal, parse ENDING address  
000001AE  6000 00B6                 77              BRA        IDENTIFY_OPCODE      ; done parsing, D4 = 2
000001B2                            78  
000001B2                            79  CHECK_LENGTH:
000001B2  B23C 0004                 80              CMP.B      #4, D1               ; for task 2, length of string is in D1                
000001B6  6700 001C                 81              BEQ        CONVERT_TO_HEX 
000001BA  B23C 0008                 82              CMP.B      #8, D1               ; address can either be 4 or 8 bits in length  
000001BE  6700 0014                 83              BEQ        CONVERT_TO_HEX
000001C2  6000 0002                 84              BRA        INVALID_INPUT
000001C6                            85  
000001C6                            86  INVALID_INPUT:  
000001C6                            87m             PRINT_MSG  badInput
000001D2  6094                      88              BRA        MAIN
000001D4                            89  
000001D4                            90  
000001D4                            91  *----------------CONVERT FROM ASCII TO HEX------------------
000001D4                            92  CONVERT_TO_HEX:
000001D4  0C11 0030                 93              CMP.B      #$30, (A1)           ; check if input is a number (lower range) - check ascii table for reference
000001D8  6DEC                      94              BLT        INVALID_INPUT        
000001DA                            95  
000001DA  0C11 003A                 96              CMP.B      #$3A,(A1)            ; check if input is a number (upper range)
000001DE  6D00 0012                 97              BLT        NUM_TO_HEX      
000001E2                            98  
000001E2  0C11 0041                 99              CMP.B      #$41, (A1)           ; check if input is a letter (lower range)
000001E6  6DDE                     100              BLT        INVALID_INPUT             
000001E8                           101  
000001E8  0C11 0047                102              CMP.B      #$47,(A1)            ; check if input is a number (upper range)
000001EC  6D00 000C                103              BLT        LETTER_TO_HEX
000001F0                           104  
000001F0  60D4                     105              BRA        INVALID_INPUT    
000001F2                           106  
000001F2                           107  NUM_TO_HEX:      
000001F2  0411 0030                108              SUB.B      #$30, (A1)          ; subtract 30 to get a number 
000001F6  6000 000A                109              BRA        STORE_CHAR   
000001FA                           110  
000001FA                           111  LETTER_TO_HEX:     
000001FA  0411 0037                112              SUB.B      #$37, (A1)          ; subtract 37 to get a letter
000001FE  6000 0002                113              BRA        STORE_CHAR
00000202                           114  
00000202                           115  STORE_CHAR:       
00000202  D619                     116              ADD.B     (A1)+, D3            ; keep hex stored in D3           
00000204  6000 0002                117              BRA        ITERATE                 
00000208                           118  
00000208                           119  ITERATE:
00000208  5301                     120              SUB.B      #$1, D1
0000020A  B23C 0000                121              CMP.B      #0, D1
0000020E  6700 0006                122              BEQ        STORE_INPUT
00000212                           123  
00000212  E98B                     124              LSL.L      #4, D3               ; shift D3 contents left by 4 to receive next input
00000214  60BE                     125              BRA        CONVERT_TO_HEX
00000216                           126  
00000216                           127  STORE_INPUT:
00000216  B83C 0000                128              CMP.B      #0, D4               ; D4 = 0 if start and end address have not been parsed
0000021A  6700 000A                129              BEQ        STORE_START          ; if equal, parse START address 
0000021E                           130              
0000021E  B83C 0001                131              CMP.B      #1, D4               ; D4 = 1 if start has been parsed but not end address
00000222  6600 0022                132              BNE        STORE_END         
00000226                           133  
00000226                           134  STORE_START:
00000226  21C3 0160                135              MOVE.L     D3, startAddr
0000022A  5204                     136              ADD.B      #1, D4               ; value to indicate if we are done parsing
0000022C                           137              ;CLR        D3
0000022C                           138              ;BRA       VALIDATE_INPUT
0000022C                           139  
0000022C                           140              ; USED FOR TESTING - MAKE SURE OUTPUT IS CORRECT
0000022C  4281                     141              CLR.L       D1
0000022E  2203                     142              MOVE.L      D3, D1   
00000230  103C 0003                143              MOVE.B      #3, D0     
00000234  4E4F                     144              TRAP        #15
00000236  43F8 0145                145              LEA         testMsg, A1
0000023A  103C 000E                146              MOVE.B      #14, D0
0000023E  4E4F                     147              TRAP        #15
00000240                           148  
00000240  4243                     149              CLR         D3
00000242  6000 FF5C                150              BRA         VALIDATE_INPUT
00000246                           151  
00000246                           152  STORE_END:
00000246  21C3 0164                153              MOVE.L     D3, endAddr
0000024A  5204                     154              ADD.B      #1, D4               ; value to indicate if we are done parsing
0000024C                           155              ;CLR        D3
0000024C                           156              ;BRA       VALIDATE_INPUT
0000024C                           157  
0000024C                           158              ; USED FOR TESTING - MAKE SURE OUTPUT IS CORRECT
0000024C  4281                     159              CLR.L       D1
0000024E  2203                     160              MOVE.L      D3, D1   
00000250  103C 0003                161              MOVE.B      #3, D0     
00000254  4E4F                     162              TRAP        #15
00000256  43F8 0145                163              LEA         testMsg, A1
0000025A  103C 000E                164              MOVE.B      #14, D0
0000025E  4E4F                     165              TRAP        #15
00000260                           166  
00000260  4243                     167              CLR         D3
00000262  6000 FF3C                168              BRA         VALIDATE_INPUT
00000266                           169  
00000266                           170  
00000266                           171  *-------------------IDENTIFY OPCODES--------------------
00000266                           172  
00000266                           173  IDENTIFY_OPCODE:
00000266                           174  
00000266                           175  
00000266                           176  *----------------CONVERT FROM ASCII TO HEX------------------
00000266                           177  DONE:
00000266                           178              END        MAIN        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
BADINPUT            14F
CHECK_LENGTH        1B2
CONVERT_TO_HEX      1D4
CR                  D
DONE                266
ENDADDR             164
ENDMSG              123
GET_END_ADDRESS     186
GET_INPUT           B3
GET_START_ADDRESS   16C
IDENTIFY_OPCODE     266
INVALID_INPUT       1C6
ITERATE             208
LETTER_TO_HEX       1FA
LF                  A
MAIN                168
NUM_TO_HEX          1F2
PRINT_MSG           0
STARTADDR           160
STARTMSG            100
STORE_CHAR          202
STORE_END           246
STORE_INPUT         216
STORE_START         226
TESTMSG             145
VALIDATE_INPUT      1A0
